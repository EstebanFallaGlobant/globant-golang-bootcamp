// Code generated by MockGen. DO NOT EDIT.
// Source: api/pocgrpc/user_service/pb/user_service_grpc.pb.go

// Package mock_pb is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	pb "github.com/EstebanFallaGlobant/globant-golang-bootcamp/api/pocgrpc/user_service/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserDetailServiceClient is a mock of UserDetailServiceClient interface.
type MockUserDetailServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailServiceClientMockRecorder
}

// MockUserDetailServiceClientMockRecorder is the mock recorder for MockUserDetailServiceClient.
type MockUserDetailServiceClientMockRecorder struct {
	mock *MockUserDetailServiceClient
}

// NewMockUserDetailServiceClient creates a new mock instance.
func NewMockUserDetailServiceClient(ctrl *gomock.Controller) *MockUserDetailServiceClient {
	mock := &MockUserDetailServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserDetailServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDetailServiceClient) EXPECT() *MockUserDetailServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDetailServiceClient) CreateUser(ctx context.Context, in *pb.CreateUserRequest, opts ...grpc.CallOption) (*pb.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*pb.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDetailServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDetailServiceClient)(nil).CreateUser), varargs...)
}

// GetUser mocks base method.
func (m *MockUserDetailServiceClient) GetUser(ctx context.Context, in *pb.GetUserRequest, opts ...grpc.CallOption) (*pb.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*pb.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDetailServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDetailServiceClient)(nil).GetUser), varargs...)
}

// MockUserDetailServiceServer is a mock of UserDetailServiceServer interface.
type MockUserDetailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailServiceServerMockRecorder
}

// MockUserDetailServiceServerMockRecorder is the mock recorder for MockUserDetailServiceServer.
type MockUserDetailServiceServerMockRecorder struct {
	mock *MockUserDetailServiceServer
}

// NewMockUserDetailServiceServer creates a new mock instance.
func NewMockUserDetailServiceServer(ctrl *gomock.Controller) *MockUserDetailServiceServer {
	mock := &MockUserDetailServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserDetailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDetailServiceServer) EXPECT() *MockUserDetailServiceServerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDetailServiceServer) CreateUser(arg0 context.Context, arg1 *pb.CreateUserRequest) (*pb.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDetailServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDetailServiceServer)(nil).CreateUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserDetailServiceServer) GetUser(arg0 context.Context, arg1 *pb.GetUserRequest) (*pb.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserDetailServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserDetailServiceServer)(nil).GetUser), arg0, arg1)
}

// mustEmbedUnimplementedUserDetailServiceServer mocks base method.
func (m *MockUserDetailServiceServer) mustEmbedUnimplementedUserDetailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserDetailServiceServer")
}

// mustEmbedUnimplementedUserDetailServiceServer indicates an expected call of mustEmbedUnimplementedUserDetailServiceServer.
func (mr *MockUserDetailServiceServerMockRecorder) mustEmbedUnimplementedUserDetailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserDetailServiceServer", reflect.TypeOf((*MockUserDetailServiceServer)(nil).mustEmbedUnimplementedUserDetailServiceServer))
}

// MockUnsafeUserDetailServiceServer is a mock of UnsafeUserDetailServiceServer interface.
type MockUnsafeUserDetailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserDetailServiceServerMockRecorder
}

// MockUnsafeUserDetailServiceServerMockRecorder is the mock recorder for MockUnsafeUserDetailServiceServer.
type MockUnsafeUserDetailServiceServerMockRecorder struct {
	mock *MockUnsafeUserDetailServiceServer
}

// NewMockUnsafeUserDetailServiceServer creates a new mock instance.
func NewMockUnsafeUserDetailServiceServer(ctrl *gomock.Controller) *MockUnsafeUserDetailServiceServer {
	mock := &MockUnsafeUserDetailServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserDetailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserDetailServiceServer) EXPECT() *MockUnsafeUserDetailServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserDetailServiceServer mocks base method.
func (m *MockUnsafeUserDetailServiceServer) mustEmbedUnimplementedUserDetailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserDetailServiceServer")
}

// mustEmbedUnimplementedUserDetailServiceServer indicates an expected call of mustEmbedUnimplementedUserDetailServiceServer.
func (mr *MockUnsafeUserDetailServiceServerMockRecorder) mustEmbedUnimplementedUserDetailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserDetailServiceServer", reflect.TypeOf((*MockUnsafeUserDetailServiceServer)(nil).mustEmbedUnimplementedUserDetailServiceServer))
}
